# Names:



# You may work with 1 or 2 partners for this activity.


On Thursday, we worked on adding Points and custom slots and signals to our plot project. Today, we'll work on deleting Points from our plot. (hooking up the Delete Points button)



Task 0: Make sure you have the code from last class
---------------------------------------------

If you did not finish the Tasks from last class or you were not here, download the completed zip file from canvas.

We'll adjust this code together before you get started on the tasks below, so make sure to follow along!


Task 1: finish displaying distance
---------------------------------------------
0) Make it so that the PointSelected signal is only sent when a point is right-clicked.  
You can access information about the mouse button clicked via the event->button() method. To see if a certain modifier was used, you can test if the flags returned == Qt::ModifierYouAreLookingFor.

Take a look at the following documentation:
https://doc.qt.io/qt-5/qt.html#MouseButton-enum 

1) Make it so when the user right-clicks a second point, it's information is filled in under the Point 2 label.

2) Make it so when the user right-clicks a second point, the Distance label is also updated. Use the Point's Distance() method!




Task 2: Adding a boolean delete_mode_ field to your project
-----------------------------------------------
1) Add a boolean delete_mode_ field to your PlotWindow class. Don't forget to initialize this field in your PlotWindow constructor file and add any appropriate getters/setters!



2) Attach the Delete Points button's clicked signal to a slot that changes the value of the PlotWindow's delete_mode_ field to the opposite of the value that it previously had. Use the ui->centralWidget->setCursor() method (http://doc.qt.io/qt-5/qt.html#CursorShape-enum) to change the appearance of the cursor to something else when the user is in delete mode. Make sure to change it back when the user is no longer in delete mode!


Task 3: Emitting a DeletePoint signal from Point
-------------------------------------------------
1) When a Point is clicked in delete mode, emit a new signal with the following signature:
void DeletePoint(Point * p)



2) Create a corresponding slot in PlotWindow. Make sure to connect each Point's DeletePoint signal to the slot that you create in PlotWindow. In this slot, we will need to call the scene->removeItem(QGraphicsItem * item) method to delete the Point. Do this.




Task 4: Make something new happen when a Point is shift-clicked!
-------------------------------------------------
1) In the mousePressEvent in Point, add a conditional that something of your choice when the user shift-clicks a point. You can access the modifiers of the event that triggered this slot by using event->modifiers() method. To see if a certain modifier was used, you can test if the flags return == Qt::ModifierYouAreLookingFor.





If you finish, zip up all of your code except for your .pro.user file and turn this in on canvas. If you worked with a partner, make a comment on your submission of who you worked with.


