# Names:



# You may work with 1 or 2 partners for this activity.
# Note! This will be an activity that spans multiple days â€” it will be easiest if you and your partner(s) are able to work together for the duration of the activity.


On Tuesday, we worked on adding axes and two slots to our plot project. Today, we'll work on actually graphing points and hooking up the Add Point button to our mouse clicks.

Task 0: Make sure you have axes
---------------------------------------------

If you did not finish Task 2 from lecture 15, add the following code to your PlotWindow constructor.

// Calculate the mid points
int x_mid = view->frameSize().height() / 2;
int y_mid = view->frameSize().width() / 2;

// draw the axes
scene->addLine(0, x_mid, view->frameSize().width(), x_mid);
scene->addLine(y_mid, 0, y_mid, view->frameSize().height());



Task 1: Adding the Point object to your project
-----------------------------------------------

Download point.[h, cpp] from the github repo. Move these files into your plotproject_starter1 folder via the command line or a file explorer. 


1) Can you see these files under the "Headers" and "Sources" folder icons in Qt Creator?


2) Edit your plotproject_starter1.pro file to include the point.[h, cpp] files. What happens in Qt Creator when you edit these files?


3) Add an include for "point.h" into your plotwindow.[h, cpp] files. Make sure that your project can still build.


Task 2: Exploring Point
-----------------------------------------------

1) What object(s) does the Point object inherit from? Can a Point object emit a signal?


2) What are the static fields (class attributes) of the Point class? What do you think that they are for/will be for?


3) What are the non-static fields (class attributes) of the Point class?


4) What are the purposes of the following methods:
	a) boundingRect

	b) shape

	c) paint


Task 3: Adding some Points to our scene (manually)
-----------------------------------------------

1) Instantiate a Point * in your PlotWindow constructor (make sure to pass a QColor as the first parameter, a QColor can be instantiated by giving it 3 int values for red, green, blue). Once you've done this, call the scene->addItem method passing in your Point *. Make sure that when you run your program you can see your Point! (Hint: if you give your Point the coordinates 0, 0, it will appear in the upper left corner)


2) What lines of code do you need to write to add a Point to your scene that appears at the origin?


Task 4: Adding some Points to our scene (Add Point button)
-----------------------------------------------
1) Create a slot that is triggered when the "Add Point" button is clicked.


2) Make this slot so that it actually adds a Point to your graphics scene. Use the following code (and add to it!) to get the coordinates from the text boxes as integers:

// &safe is the address of a boolean value that will be set to True if the 
// method successfully converted the text to an int and False otherwise
int x = ui->xCoord->text().toInt(&safe);

Make sure that the Points appear where the user thinks that they should appear!



Task 5: Emitting a Signal from a Point (custom everything!)
-------------------------------------------------
1) Take a look at the Point header file. There is the definition of a signal here. What parameters does this signal take?



2) Emit the PointClicked signal from the mousePressEvent method in the Point class. Make sure to give it the x and y values of this Point! Run your application. Has anything changed? Why or why not?



3) When you add a Point to your scene in your PlotWindow, connect that Point and it's PointClicked signal to a new slot in your PlotWindow class. This new slot must have the same parameters as the signal that it is receiving. Implement this slot so that it prints the x and y coordinates of the clicked point via qDebug().



4) Will signals ever have return values? why yes/ why no?



5) Implement a second signal for your Point object that has a Point * parameter. Implement a corresponding slot and connect this signal from the points that you create to this slot.



Task 6: Making our Point change colors when we click it
-----------------------------------------------
1) Add the line of code srand(time(0)); to your PlotWindow constructor (we only want to seed random once, when the PlotWindow is created).


2) Finish implementing the void Point::mousePressEvent(QGraphicsSceneMouseEvent *event) method in point.cpp. This method is automatically called whenever a user clicks a Point.



