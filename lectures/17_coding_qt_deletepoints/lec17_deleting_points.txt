# Names:



# You may work with 1 or 2 partners for this activity.

# You will work off of the code that you develop here for PE 11. Go ahead and zip up what you have so far (be sure to include plotproject.pro, main.cpp, plotwindow.[h, cpp], and point.[h, cpp]) and turn it in by the end of lecture today.

PLEASE INCLUDE YOUR NAMES IN THE plotwindow.cpp FILE!

On Thursday, we worked on adding Points and custom slots and signals to our plot project. Today, we'll work on deleting Points from our plot.

Task 0: Make sure you have the code from lecture 16
---------------------------------------------

If you did not finish the Tasks from lecture 16 (last Thursday), go get the code and import it as a project.


Task 1: Adding a static boolean delete_mode_ field to the Point class
-----------------------------------------------
1) Add a static boolean to the Point class called delete_mode_. This boolean should be set to False when you are not in "delete mode" and to True when you are in "delete mode". You should also change what the cursor looks like with the ui->centralWidget->setCursor() method when you are in delete mode vs. regular mode that takes a Qt Cursor Shape enum (http://doc.qt.io/qt-5/qt.html#CursorShape-enum).


2) Attach the Delete Points button's clicked signal to a slot that changes the value of the Point::delete_mode_ field.


Task 2: Emitting a DeletePoint signal from Point
-------------------------------------------------
1) When a Point is clicked in delete mode, emit a new signal with the following signature:
void DeletePoint(Point * p)



2) Create a corresponding slot in PlotWindow. This is because we will need to call the scene->removeItem(QGraphicsItem * item) method to delete the Point.








