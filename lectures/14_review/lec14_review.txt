(work by yourself but feel free to talk to your classmates and ask us questions)
Turn this file in on canvas before the end of class.

This review is meant to be a check-in with yourself. Which of the topics are you confident about? Which are you less confident about? What do you need to review?

For each question, answer without looking at the internet, then compare answers with your table-mates and your notes. 

Name:

Section 1: c++
---------
1. What is a reference? What is a pointer? How are they different?


2. Given the following class definition, how would you call the method CalculateMysteries?

class Foo {
public:
    Foo(int bar) : bar_(bar) {}

    int CalculateMysteries();

    static int TotalBars();

private:
    int bar_;

    static int baz_;
};

3. How would you call the method TotalBars()?


4. Can you access the field bar_ from inside the method TotalBars()? Why/why not?


5. Can you access the field baz_ from inside the method CalculateMysteries()? Why/why not?


Section 2: Version control & git
----------
1. What is a branch? Why would you work on a non-master branch?


2. If you are currently working on the branch my-fabulous-feature and your teammate merges another feature into master, what are the commands that you would run to switch to master, get the new code, switch back to your branch, and merge the new code from master into your branch?


3. What is the difference between issuing a "git pull" and submitting a "pull request"?


4. When you're reviewing a PR, what are 3 different specific things that you should look for in the code that you're reviewing?



Section 3: bash
------------
1. What is your PS1?



2. Rate your level of comfort working on the command line on a scale from "not comfortable at all" to "completely comfortable, I am a command line master". Be honest with yourself.



3. If you are developing in an IDE (such as Sublime, CodeRunner, CodeBlocks, XCode, etc) and your project isn't compiling by pressing the "run/build" button, what are two things that you should do to fix the issue?


Section 4: Unit testing/Catch2
------------
1. What is a TEST_CASE? What is a SECTION? What should each be used for? How many methods should be tested in each TEST_CASE? what about SECTION?


Section 5: Design Patterns
----------
1. For each of the following design patterns, briefly describe what problem they solve and how they are implemented in c++.

a. Singleton


b. Flyweight
(Since we didn't go over implementation of this design pattern in depth in class, now would be a great time to take a look at http://gameprogrammingpatterns.com/flyweight.html)


c. Prototype



d. Factory



e. Iterator



2. In class, we went over how you will frequently _interact_ with the design pattern Iterator but will rarely implement it yourselves. Why is this?
